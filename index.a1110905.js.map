{"mappings":"AAAO,MAAMA,EAAO,CAClBC,KAAMC,SAASC,cAAc,cAC7BC,KAAMF,SAASC,cAAc,eCAxB,IAkBIE,EAAS,CAACC,EAAO,MAC1B,IAAIC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAClD,KAAOA,KACLC,GCvBF,mEDuBkC,GAAdC,EAAMF,IAE1B,OAAOC,CAAE,EExBJ,SAASK,IACd,MAAMC,EAAa,CAAEN,GAAIF,KAIzB,OAHA,IAAIS,SAASd,EAAKC,MAAMc,SAAQ,CAACC,EAAOC,KACtCJ,EAAWI,GAAOD,CAAK,IAElBH,C,CCPF,SAASK,EAAiBL,GAC/B,MAAO,6EACsCA,EAAWN,8BAClDM,EAAWM,sBACbN,EAAWO,wB,CCIjB,SAASC,IACP,OAAOC,KAAKC,MAAMC,aAAaC,QATb,WASsC,E,CAGnD,MAAMC,EAAkB,C,IAV/B,SAAab,GACX,MAAMc,EAAWN,IACjBM,EAASC,KAAKf,GACdW,aAAaK,QALK,QAKgBP,KAAKQ,UAAUH,G,SASjDN,GCSFrB,EAAKC,KAAK8B,iBAAiB,UAG3B,SAAoBC,GAClBA,EAAMC,iBACN,MAAMpB,EAAaD,IAEbsB,EAAShB,EAAiBL,GAEhCb,EAAKI,KAAK+B,mBAAmB,YAAaD,GAC1CR,EAAgBU,IAAIvB,E,IC7Bf,WACL,MACMqB,EADQR,EAAgBW,SACTC,IAAIpB,GAAkBqB,KAAK,IAChDvC,EAAKI,KAAK+B,mBAAmB,YAAaD,E,CDiB5C","sources":["src/js/refs.js","node_modules/nanoid/index.browser.js","node_modules/nanoid/url-alphabet/index.js","src/js/createData.js","src/js/createNoteMarkup.js","src/js/localStorageAPI.js","src/index.js","src/js/renderNotes.js"],"sourcesContent":["export const refs = {\n  form: document.querySelector('#task-form'),\n  list: document.querySelector('#task-list'),\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { refs } from './refs';\nimport { nanoid } from 'nanoid';\nexport function createData() {\n  const formValues = { id: nanoid() };\n  new FormData(refs.form).forEach((value, key) => {\n    formValues[key] = value;\n  });\n  return formValues;\n}\n","export function createNoteMarkup(formValues) {\n  return `<li class=\"task-list-item\">\n  <button class=\"task-list-item-btn\" data-id=${formValues.id}>Удалить</button>\n  <h3>${formValues.taskName}</h3>\n <p>${formValues.taskText}</p>\n   </li>`;\n}\n","const STORAGE_KEY = 'notes';\n\nfunction add(formValues) {\n  const newArray = getAll();\n  newArray.push(formValues);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(newArray));\n}\n\nfunction getAll() {\n  return JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];\n}\n\nexport const localStorageAPI = {\n  add,\n  getAll,\n};\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\n\nimport { refs } from './js/refs';\nimport { createData } from './js/createData';\nimport { createNoteMarkup } from './js/createNoteMarkup';\nimport { localStorageAPI } from './js/localStorageAPI';\nimport { renderNotes } from './js/renderNotes';\n\nrefs.form.addEventListener('submit', submitForm);\nrenderNotes();\n\nfunction submitForm(event) {\n  event.preventDefault();\n  const formValues = createData();\n\n  const markup = createNoteMarkup(formValues);\n\n  refs.list.insertAdjacentHTML('beforeend', markup);\n  localStorageAPI.add(formValues);\n}\n","import { localStorageAPI } from './localStorageAPI';\nimport { createNoteMarkup } from './createNoteMarkup';\nimport { refs } from './refs';\n\nexport function renderNotes() {\n  const notes = localStorageAPI.getAll();\n  const markup = notes.map(createNoteMarkup).join('');\n  refs.list.insertAdjacentHTML('beforeend', markup);\n}\n"],"names":["$ee27a4d7c64fc8c4$export$21666b427502ea6d","form","document","querySelector","list","$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","id","bytes","crypto","getRandomValues","Uint8Array","$e4f73d03f190f807$export$773d79863eecfeab","formValues","FormData","forEach","value","key","$6f3d8119e4eca0d6$export$194e3972f879bfde","taskName","taskText","$f1e93b4660a948dd$var$getAll","JSON","parse","localStorage","getItem","$f1e93b4660a948dd$export$4a683aab0e79cfdc","newArray","push","setItem","stringify","addEventListener","event","preventDefault","markup","insertAdjacentHTML","add","getAll","map","join"],"version":3,"file":"index.a1110905.js.map"}